import os
import logging
from sqlalchemy import create_engine, inspect
from sqlalchemy.orm import sessionmaker, declarative_base, Session
from contextlib import contextmanager

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

Base = declarative_base()

DATABASE_URL = "sqlite:///./monitoring.db"

engine = create_engine(
    DATABASE_URL, connect_args={"check_same_thread": False}
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# --- –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ `with`
@contextmanager
def get_db_session_context():
    db = SessionLocal()
    try:
        yield db
        db.commit()
    except Exception:
        db.rollback()
        raise
    finally:
        db.close()

# --- –¥–ª—è Depends –≤ FastAPI
def get_db_session():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def init_db():
    from app import models

    db_exists = os.path.exists("./monitoring.db")

    Base.metadata.create_all(bind=engine)

    if not db_exists:
        logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö monitoring.db üõ†Ô∏è")
    else:
        logger.info("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü ‚úÖ")

    from sqlalchemy import inspect
    inspector = inspect(engine)
    tables = inspector.get_table_names()

    if "servers" in tables:
        logger.info("–¢–∞–±–ª–∏—Ü–∞ 'servers' –≥–æ—Ç–æ–≤–∞ ‚úÖ")
    else:
        logger.error("–¢–∞–±–ª–∏—Ü–∞ 'servers' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏! ‚ùå")

# --- –ó–ê–°–ï–ò–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–ú–ò
def seed_servers(db: Session):
    from app.models import Server

    existing_server = db.query(Server).filter_by(name="SUNTD").first()
    if existing_server:
        logger.info("–°–µ—Ä–≤–µ—Ä 'SUNTD' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚úÖ")
        return

    suntd_server = Server(
        name="SUNTD",
        ip_or_domain="suntd.kodeks.expert",
        ports="",
        is_active=True,
        meta_info="Initial SUNTD server",
    )
    db.add(suntd_server)
    db.commit()
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä 'SUNTD' –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö üì¶")
