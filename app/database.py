
import os
import logging
from sqlalchemy import create_engine, inspect
from sqlalchemy.orm import sessionmaker, Session
from contextlib import contextmanager

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = "sqlite:///./monitoring.db"

engine = create_engine(
    DATABASE_URL, connect_args={"check_same_thread": False}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# --- –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å
from app.models.base import Base

# --- –°–µ—Å—Å–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ `with`
@contextmanager
def get_db_session_context():
    db = SessionLocal()
    try:
        yield db
        db.commit()
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –ë–î: {e}")
        raise
    finally:
        db.close()

# --- –°–µ—Å—Å–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ FastAPI Depends
def get_db_session():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def init_db():
    from app.models import Server, ServerInfo, CatalogStatus, Service

    db_existed = os.path.exists("./monitoring.db")

    Base.metadata.create_all(bind=engine)

    if db_existed:
        logger.info("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª ‚úÖ")
    else:
        logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö monitoring.db üõ†Ô∏è")

    inspector = inspect(engine)
    tables = inspector.get_table_names()
    if "servers" in tables:
        logger.info("–¢–∞–±–ª–∏—Ü–∞ 'servers' –≥–æ—Ç–æ–≤–∞ ‚úÖ")
    else:
        logger.error("–¢–∞–±–ª–∏—Ü–∞ 'servers' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏! ‚ùå")

# --- –ó–∞—Å–µ–∏–≤–∞–Ω–∏–µ –±–∞–∑—ã –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
def seed_servers(db: Session):
    from app.models.server import Server

    try:
        existing_server = db.query(Server).filter_by(name="SUNTD").first()
        if existing_server:
            logger.info("–°–µ—Ä–≤–µ—Ä 'SUNTD' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚úÖ")
            return

        suntd_server = Server(
            name="SUNTD",
            ip_or_domain="suntd.kodeks.expert",
            ports=""
        )
        db.add(suntd_server)
        db.commit()
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä 'SUNTD' –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö üì¶")
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Å–µ–≤–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ 'SUNTD': {e}")
        raise
