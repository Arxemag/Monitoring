import asyncio
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn
from app.database import SessionLocal
from app.models import Server
from app.parser import parse_server_data

console = Console()

async def test_parsing():
    db = SessionLocal()

    servers = db.query(Server).filter(Server.ports.in_([1212, 1210])).all()
    if not servers:
        console.print("[bold red]‚ùå –°–µ—Ä–≤–µ—Ä–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/]")
        return

    console.print(f"[bold cyan]üîç –ù–∞–π–¥–µ–Ω–æ {len(servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞[/]")

    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        transient=True,
    ) as progress:
        task = progress.add_task("–°—Ç–∞—Ä—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞...", total=len(servers))

        for server in servers:
            try:
                progress.update(task, description=f"–ü–∞—Ä—Å–∏–º {server.host}:{server.ports}...")
                await parse_server_data(server, db)
                console.print(f"[green]‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:[/] {server.host}:{server.ports}")
            except Exception as e:
                console.print(f"[red]‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {server.host}:{server.ports}: {e}[/]")
            finally:
                progress.advance(task)

    db.close()
    console.print("[bold green]üéâ –í—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã![/]")

if __name__ == "__main__":
    asyncio.run(test_parsing())
